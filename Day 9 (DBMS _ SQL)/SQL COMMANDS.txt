SQL ------STRUCTURED QUERY LANGUAGE--------------
1. SELECT * FROM SYSTEM.customers
2. SELECT * FROM STSTEM.products
3. SELECT * FROM STSTEM.categories
4. SELECT * FROM STSTEM.orders
5. SELECT * FROM STSTEM.order_details
6. SELECT * FROM STSTEM.employess
--SELECT Statement
--SEELCT <columnList>
--FROM <tableList>
--WHERE <conditions>
--GROUP BY <expressions>
--HAVING <conditions>
--ORDER BY <expressions>

--1. PROJECTION
--what to extraxt from the table

SELECT CUSTOMERS_ID, COMPANY_NAME, CONTACT_NAME
FROM SYSTEM.customers;

-- * -> DB replaces the * from all the colum names
--literal coloumns

SELECT 'The customer', COMPANY_NAME, 'IS LOCATED IN', city
FROM SYSTEM>customers;

-- Column name alias - alternate name in the output
SELECT CUSTOMER_ID AS CustId, COMPANY_NAME as Company,
CITY, COUNTRY
FROM SYSTEM.customers

-- Derived Columns are supported - combining 2 or more coulmns in the output--
SELECT CUSTOMER_CODE AS "Cust_Code",
	CITY || ' ' || COUNTRY AS "Location"
FROM SYSTEM.customers
--another way
SELECT PRODUCT_ID, PRODUCT_NAME, UNIT_PRICE,UNITS_IN_STOCK,
(UNIT_PRICE * UNITS_IN_STOCK) AS StockValue
FROM SYSTEM.products;




-------In remote server-------------------
--2. Restricitons
-- limits the number pf rows extracted
-- use "WHERE" clause and relational and logical operators
SELECT Customer_Code, Company_Name, Contact_Name, City, Country
FROM customers
WHERE Country = 'USA';   --EQUAL

SELECT Product_id, product_name, unit_price, units_in_stock
FROM products
WHERE unit_price > 50;

SELECT Product_id, product_name, unit_price, units_in_stock
FROM products
WHERE unit_price < 10;
SELECT Customer_Code, Company_Name, Contact_Name, City, Country
FROM customers
WHERE Country != 'USA'; --NOT EQUAL


SELECT Product_id, product_name, unit_price, units_in_stock
FROM products
WHERE unit_price >= 10;

-- Write a query to dispplay the list of customers residing in LONDON
SELECT * FROM customers;

SELECT * FROM customers WHERE  City = 'London';
-- compound conditions -> and , or
select product_id, product_name, category_id from products
where category_id=3 or category_id=7;

--and
select product_id, product_name, unit_price, units_in_stock
from products
where unit_price > 50 and units_in_stock < 50;

--IN --> replace multiple or conditions
SELECT product_id, product_name, category_id
FROM products
-- category_id = 1 OR category_id = 2 OR category_id = 5
WHERE category_id IN (1,2,5);

SELECT product_id, product_name, category_id
FROM products
-- category_id != 1 OR category_id != 2 OR category_id != 5
WHERE category_id not in (1,2,5);

--Range of Value - BETWEEN
SELECT product_id , product_name, category_id
FROM products
WHERE category_id BETWEEN 1 and 5;

SELECT product_id , product_name, category_id
FROM products
WHERE category_id NOT BETWEEN 1 and 5;

-- Pattern matching
-- Wild cards %,_ (underscore)
-- % (percentage) represents many number of characters
-- _ (underscore) represents a single character

SELECT Country FROM Customers WHERE Country LIKE 'U%';  -- starting with U
SELECT Country FROM Customers WHERE Country LIKE '%e';  -- ending with e
SELECT Country FROM Customers WHERE Country LIKE '%an%'; -- contains an
SELECT Country FROM Customers WHERE Country LIKE '%an_';  -- contains an and one more charater at the end

-- write a query to fetch all customers whose company names ends with d in third last place
SELECT Company_name FROM Customers WHERE Company_name LIKE '%d__';

-- write a query to fetch all customers whose company_names starts with letters between A and M
SELECT Company_name FROM Customers WHERE Company_name BETWEEN 'A%' AND 'M%';

SELECT Company_name FROM Customers WHERE Company_name LIKE '[A-M]%'; --does not work in oracle but it will work in other DB








